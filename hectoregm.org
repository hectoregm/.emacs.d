#+TITLE: Hector Gomez's Emacs 24 Configuration
#+AUTHOR: Hector Gomez
#+EMAIL: hectoregm@gmail.com
#+OPTIONS: toc:3 num:nil
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="http://thomasf.github.io/solarized-css/solarized-light.min.css" />

* Configuration
  My config for Emacs.
** Startup
   Settings that are better to do early in the startup process.
*** User details
    :PROPERTIES:
   :CUSTOM_ID: general-info
   :END:

    Basic info about me
    #+begin_src emacs-lisp
     (setq user-full-name "Hector E. Gomez Morales")
     (setq user-mail-address "hectoregm@gmail.com")
    #+end_src
*** Common Lisp for Emacs
    :PROPERTIES:
    :CUSTOM_ID: common-lisp
    :END:

    Emacs lisp is really only a subset of common lisp, and I need to have some
    of the additional functionality to make the configuration and its dependencies
    work properly, which we get by requiring Common Lisp for Emacs.
    #+begin_src emacs-lisp
     (require 'cl)
    #+end_src
*** Key bindings
    :PROPERTIES:
    :CUSTOM_ID: keybindings
    :END:

    Sane keybindings for Mac.
    #+begin_src emacs-lisp
      (setq mac-option-modifier 'super)
      (setq mac-command-modifier 'meta)
    #+end_src
*** Yes and No
    :PROPERTIES:
    :CUSTOM_ID: yes-and-no
    :END:

    Nobody likes to have to type out the full yes or no when Emacs asks. Which it does often. Make it one character.
    #+begin_src emacs-lisp
      (defalias 'yes-or-no-p 'y-or-n-p)
    #+end_src
*** Backup
    :PROPERTIES:
    :CUSTOM_ID: backup
    :END:

    Remove creation of backup files, top annoying feature in emacs.
    #+begin_src emacs-lisp
      (setq make-backup-files nil)
    #+end_src
*** Unicode
    :PROPERTIES:
    :CUSTOM_ID: unicode
    :END:

    Setup unicode
    #+begin_src emacs-lisp
      (prefer-coding-system       'utf-8)
      (set-default-coding-systems 'utf-8)
      (set-terminal-coding-system 'utf-8)
      (set-keyboard-coding-system 'utf-8)
      (setq default-buffer-file-coding-system 'utf-8)
      (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING))
      (setq make-backup-files nil)
    #+end_src
** Packages
   :PROPERTIES:
   :CUSTOM_ID: packages
   :END:

   Using only [[http://melpa.milkbox.net/#][MELPA]] repositories.
   #+begin_src emacs-lisp
     (package-initialize)
     (add-to-list 'package-archives
                  '("melpa" . "http://melpa.milkbox.net/packages/") t)
   #+end_src
*** Define default packages
    :PROPERTIES:
    :CUSTOM_ID: default-packages
    :END:

    This is the list of packages used in this configuration.
    #+begin_src emacs-lisp
      (defvar hectoregm/packages '(exec-path-from-shell
                                   python-mode
                                   haskell-mode
                                   racket-mode
                                   magit
                                   ruby-electric
                                   dash-at-point
                                   projectile
                                   projectile-rails
                                   rvm
                                   rhtml-mode
                                   slim-mode
                                   yaml-mode)
        "Default packages")
    #+end_src
*** Install default packages
    :PROPERTIES:
    :CUSTOM_ID: package-install
    :END:

    When Emacs boots, check to make sure all of the packages defined
    in =hectoregm/packages= are installed. If not, have ELPA take care of
    it.
    #+begin_src emacs-lisp
      (defun hectoregm/packages-installed-p ()
        (loop for pkg in hectoregm/packages
              when (not (package-installed-p pkg)) do (return nil)
              finally (return t)))

      (unless (hectoregm/packages-installed-p)
        (message "%s" "Refreshing package database...")
        (package-refresh-contents)
        (dolist (pkg hectoregm/packages)
          (when (not (package-installed-p pkg))
            (package-install pkg))))
    #+end_src
*** Environment
    :PROPERTIES:
    :CUSTOM_ID: environment
    :END:

    Set correct PATH.
    #+begin_src emacs-lisp
       (when (memq window-system '(mac ns))
         (exec-path-from-shell-initialize))
    #+end_src
** Visual tweaks
*** Emacs window
   :PROPERTIES:
   :CUSTOM_ID: emacs-window
   :END:

   #+begin_src emacs-lisp
      (tool-bar-mode -1)
      (scroll-bar-mode -1)

      (setq visible-bell t
            inhibit-splash-screen t
            inhibit-startup-message t
            initial-scratch-message nil)
   #+end_src
*** Default Font
   :PROPERTIES:
   :CUSTOM_ID: default-font
   :END:

   Set default font as DejaVu Sans Mono, size 18 pts.
   #+begin_src emacs-lisp
      (set-default-font "DejaVu Sans Mono 18")
   #+end_src
*** Default Theme
   :PROPERTIES:
   :CUSTOM_ID: default-theme
   :END:

   Default theme is off my own design based in the Railscasts theme.
   #+begin_src emacs-lisp
      (add-to-list 'custom-theme-load-path "~/.emacs.d/themes")
      (setq custom-safe-themes t)
      (load-theme 'hectoregm)
   #+end_src
*** Whitespace
   :PROPERTIES:
   :CUSTOM_ID: whitespace
   :END:

   Always use spaces instead of tabs, and define helper functions
   untabify-buffer - Removes all the tabs from the buffer.
   indent-buffer - Indents the whole buffer
   cleanup-buffer - Performs
   #+begin_src emacs-lisp
      (setq-default indent-tabs-mode nil)

      (defun untabify-buffer ()
        (interactive)
        (untabify (point-min) (point-max)))

      (defun indent-buffer ()
        (interactive)
        (indent-region (point-min) (point-max)))

      (defun cleanup-buffer ()
        "Perform a bunch of operations on the whitespace content of a buffer."
        (interactive)
        (indent-buffer)
        (untabify-buffer)
        (delete-trailing-whitespace))

      (global-set-key (kbd "C-c n") 'cleanup-buffer)
   #+end_src
*** Modeline
   :PROPERTIES:
   :CUSTOM_ID: modeline
   :END:

   #+begin_src emacs-lisp
      (line-number-mode 1)
      (column-number-mode 1)
   #+end_src
*** Highlight
   :PROPERTIES:
   :CUSTOM_ID: highlight
   :END:

   #+begin_src emacs-lisp
      (line-number-mode 1)
      (defun turn-on-hl-line-mode ()
        (when (> (display-color-cells) 8)
          (hl-line-mode t)))
      (add-hook 'prog-mode-hook 'turn-on-hl-line-mode)

   #+end_src
** Utility modes
*** Projectile
   :PROPERTIES:
   :CUSTOM_ID: python
   :END:

   Enable Projectile global mode
   #+begin_src emacs-lisp
      (projectile-global-mode)
   #+end_src
** Non Programming modes
*** Latex
   :PROPERTIES:
   :CUSTOM_ID: latex
   :END:

    Latex configuration
   #+begin_src emacs-lisp
      (require 'tex-mode)

      (defvar texlive-bin
        "/usr/local/texlive/2015/bin/x86_64-darwin"
        "The location of the TeXlive distribution binaries.")

      (setq latex-run-command (expand-file-name "pdflatex" texlive-bin)
            tex-bibtex-command (expand-file-name "bibtex" texlive-bin))
   #+end_src

   #+RESULTS:
   : /usr/local/texlive/2014/bin/x86_64-darwin/bibtex

*** Org mode
   :PROPERTIES:
   :CUSTOM_ID: org-mode
   :END:

    Org mode configuration
   #+begin_src emacs-lisp
      (global-set-key (kbd "C-c c")
                      (lambda ()
                        (interactive) (find-file "~/.emacs.d/hectoregm.org")))
   #+end_src
** Programming modes
*** Dash
   :PROPERTIES:
   :CUSTOM_ID: dash
   :END:

   Dash integration
   #+begin_src emacs-lisp
      (autoload 'dash-at-point "dash-at-point"
          "Search the word at point with Dash." t nil)
      (global-set-key (kbd "C-c d") 'dash-at-point)
      (global-set-key (kbd "C-c e") 'dash-at-point-with-docset)
   #+end_src
*** Javascript
   :PROPERTIES:
   :CUSTOM_ID: javascript
   :END:

   Javascript configuration
   #+begin_src emacs-lisp
      (setq js-indent-level 2)
   #+end_src
*** Python
   :PROPERTIES:
   :CUSTOM_ID: python
   :END:

   Python configuration
   #+begin_src emacs-lisp
      (require 'python-mode)
   #+end_src

*** Python
   :PROPERTIES:
   :CUSTOM_ID: ruby
   :END:

   Ruby configuration
   #+begin_src emacs-lisp
      (add-hook 'ruby-mode-hook 'ruby-electric-mode)
   #+end_src
*** Rails
   :PROPERTIES:
   :CUSTOM_ID: rails
   :END:

   Rails configuration
   #+begin_src emacs-lisp
      (add-hook 'projectile-mode-hook 'projectile-rails-on)
   #+end_src
*** Racket
   :PROPERTIES:
   :CUSTOM_ID: racket
   :END:

   Racket configuration
   #+begin_src emacs-lisp
      (setq racket-racket-program "/Applications/Racket v6.1.1/bin/racket")
   #+end_src
*** Haskell
   :PROPERTIES:
   :CUSTOM_ID: haskell
   :END:

   Haskell configuration
   #+begin_src emacs-lisp
      (add-hook 'haskell-mode-hook 'haskell-indent-mode)
      (add-hook 'haskell-mode-hook 'interactive-haskell-mode)
   #+end_src
*** CSS
   :PROPERTIES:
   :CUSTOM_ID: css
   :END:

   Set tab width in CSS to two spaces.
   #+begin_src emacs-lisp
      (setq css-indent-offset 2)
   #+end_src

