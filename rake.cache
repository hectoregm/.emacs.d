#s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ("/Users/hectoregm/Projects/ticketee/" ("about                              # List versions of all Rails frameworks and the environment" "assets:clean[keep]                 # Remove old compiled assets" "assets:clobber                     # Remove compiled assets" "assets:environment                 # Load asset compile environment" "assets:precompile                  # Compile all the assets named in config.assets.precompile" "cache_digests:dependencies         # Lookup first-level dependencies for TEMPLATE (like messages/show or comments/_comment.html)" "cache_digests:nested_dependencies  # Lookup nested dependencies for TEMPLATE (like messages/show or comments/_comment.html)" "db:_dump                           # " "db:abort_if_pending_migrations     # " "db:charset                         # " "db:collation                       # " "db:create                          # Creates the database from DATABASE_URL or config/database.yml for the current RAILS_ENV (use db:create:all to create all databases in the config)" "db:create:all                      # " "db:drop                            # Drops the database from DATABASE_URL or config/database.yml for the current RAILS_ENV (use db:drop:all to drop all databases in the config)" "db:drop:all                        # " "db:fixtures:identify               # " "db:fixtures:load                   # Load fixtures into the current environment's database" "db:forward                         # " "db:load_config                     # " "db:migrate                         # Migrate the database (options: VERSION=x, VERBOSE=false, SCOPE=blog)" "db:migrate:down                    # " "db:migrate:redo                    # " "db:migrate:reset                   # " "db:migrate:status                  # Display status of migrations" "db:migrate:up                      # " "db:purge                           # " "db:purge:all                       # " "db:reset                           # " "db:rollback                        # Rolls the schema back to the previous version (specify steps w/ STEP=n)" "db:schema:cache:clear              # Clear a db/schema_cache.dump file" "db:schema:cache:dump               # Create a db/schema_cache.dump file" "db:schema:dump                     # Create a db/schema.rb file that is portable against any DB supported by AR" "db:schema:load                     # Load a schema.rb file into the database" "db:schema:load_if_ruby             # " "db:seed                            # Load the seed data from db/seeds.rb" "db:setup                           # Create the database, load the schema, and initialize with the seed data (use db:reset to also drop the database first)" "db:structure:dump                  # Dump the database structure to db/structure.sql" "db:structure:load                  # Recreate the databases from the structure.sql file" "db:structure:load_if_sql           # " "db:test:clone                      # " "db:test:clone_schema               # " "db:test:clone_structure            # " "db:test:deprecated                 # " "db:test:load                       # " "db:test:load_schema                # " "db:test:load_structure             # " "db:test:prepare                    # " "db:test:purge                      # " "db:version                         # Retrieves the current schema version number" "default                            # " "doc                                # " "doc/app                            # " "doc/app/created.rid                # " "doc:app                            # Generate docs for the app -- also available doc:rails, doc:guides (options: TEMPLATE=/rdoc-template.rb, TITLE=\"Custom Title\")" "doc:clobber                        # " "doc:clobber_app                    # " "doc:clobber_rails                  # " "doc:guides                         # " "doc:rails                          # " "doc:reapp                          # " "doc:rerails                        # " "environment                        # " "html                               # " "html/created.rid                   # " "log:clear                          # Truncates all *.log files in log/ to zero bytes (specify which logs with LOGS=test,development)" "middleware                         # Prints out your Rack middleware stack" "notes                              # Enumerate all annotations (use notes:optimize, :fixme, :todo for focus)" "notes:custom                       # Enumerate a custom annotation, specify with ANNOTATION=CUSTOM" "notes:fixme                        # " "notes:optimize                     # " "notes:todo                         # " "rails:template                     # Applies the template supplied by LOCATION=(/path/to/template) or URL" "rails:templates:copy               # " "rails:update                       # Update configs and some other initially generated files (or use just update:configs or update:bin)" "rails:update:bin                   # " "rails:update:configs               # " "railties:install:migrations        # " "routes                             # Print out all defined routes in match order, with names" "secret                             # Generate a cryptographically secure secret key (this is typically used to generate a secret for cookie sessions)" "spec                               # Run all specs in spec directory (excluding plugin specs)" "spec:controllers                   # Run the code examples in spec/controllers" "spec:features                      # Run the code examples in spec/features" "spec:prepare                       # " "spec:statsetup                     # " "stats                              # Report code statistics (KLOCs, etc) from the application or engine" "test                               # Runs all tests in test folder" "test:all                           # Run tests quickly by merging all types and not resetting db" "test:all:db                        # Run tests quickly, but also reset db" "test:controllers                   # " "test:db                            # Run tests quickly, but also reset db" "test:deprecate_all                 # " "test:functionals                   # " "test:generators                    # " "test:helpers                       # " "test:integration                   # " "test:jobs                          # " "test:mailers                       # " "test:models                        # " "test:prepare                       # " "test:run                           # " "test:single                        # " "test:units                         # " "time:zones:all                     # Displays all time zones, also available: time:zones:us, time:zones:local -- filter with OFFSET parameter, e.g., OFFSET=-6" "time:zones:local                   # " "time:zones:us                      # " "tmp                                # " "tmp/cache                          # " "tmp/cache/assets                   # " "tmp/cache/assets/development       # " "tmp/cache/assets/production        # " "tmp/cache/assets/test              # " "tmp/pids                           # " "tmp/sessions                       # " "tmp/sockets                        # " "tmp:cache:clear                    # " "tmp:clear                          # Clear session, cache, and socket files from tmp/ (narrow w/ tmp:sessions:clear, tmp:cache:clear, tmp:sockets:clear)" "tmp:create                         # Creates tmp directories for sessions, cache, sockets, and pids" "tmp:pids:clear                     # " "tmp:sessions:clear                 # " "tmp:sockets:clear                  # ") "/Users/hectoregm/Projects/highercircle/" ("about                                             # List versions of all Rails frameworks and the environment" "activate:campaign                                 # changes published campaigns to active if start date has passed" "after_deploy                                      # " "airbrake:deploy                                   # Notify Airbrake of a new deploy" "airbrake:heroku:add_deploy_notification           # Install Heroku deploy notifications addon" "airbrake:log_stdout                               # " "airbrake:test                                     # Verify your gem installation by sending a test exception to the airbrake service" "assets:cache:clean                                # " "assets:clean                                      # Remove compiled assets" "assets:clean:all                                  # " "assets:clean_expired                              # Remove old assets that aren't referenced by manifest.yml" "assets:clean_expired:all                          # " "assets:environment                                # " "assets:precompile                                 # Compile all the assets named in config.assets.precompile" "assets:precompile:all                             # " "assets:precompile:nondigest                       # " "assets:precompile:primary                         # " "attachinary:fetch_fileupload                      # fetches required jQuery File Upload files from github" "attachinary:install:migrations                    # Copy migrations from attachinary to application" "bourbon:install[sass_path]                        # Move files to the Rails assets directory" "cache:clear                                       # Clears Rails cache" "cloudinary:sync_static                            # Sync static resources with cloudinary" "conclude:campaign                                 # changes published campaigns to active if start date has passed" "cucumber                                          # Alias for cucumber:ok" "cucumber:all                                      # Run all features" "cucumber:ok                                       # Run features that should pass" "cucumber:rerun                                    # Record failing features and run only them if any exist" "cucumber:statsetup                                # " "cucumber:wip                                      # Run features that are being worked on" "db:_dump                                          # " "db:abort_if_pending_migrations                    # " "db:charset                                        # " "db:collation                                      # " "db:create                                         # Create the database from DATABASE_URL or config/database.yml for the current Rails.env (use db:create:all to create all dbs in the config)" "db:create:all                                     # " "db:drop                                           # Drops the database using DATABASE_URL or the current Rails.env (use db:drop:all to drop all databases)" "db:drop:all                                       # " "db:fixtures:identify                              # " "db:fixtures:load                                  # Load fixtures into the current environment's database" "db:forward                                        # " "db:load_config                                    # " "db:migrate                                        # Migrate the database (options: VERSION=x, VERBOSE=false)" "db:migrate:down                                   # " "db:migrate:redo                                   # " "db:migrate:reset                                  # " "db:migrate:status                                 # Display status of migrations" "db:migrate:up                                     # " "db:reset                                          # " "db:rollback                                       # Rolls the schema back to the previous version (specify steps w/ STEP=n)" "db:schema:dump                                    # Create a db/schema.rb file that can be portably used against any DB supported by AR" "db:schema:load                                    # Load a schema.rb file into the database" "db:schema:load_if_ruby                            # " "db:seed                                           # Load the seed data from db/seeds.rb" "db:sessions:clear                                 # " "db:sessions:create                                # " "db:setup                                          # Create the database, load the schema, and initialize with the seed data (use db:reset to also drop the db first)" "db:structure:dump                                 # Dump the database structure to db/structure.sql" "db:structure:load                                 # " "db:structure:load_if_sql                          # " "db:test:clone                                     # " "db:test:clone_structure                           # " "db:test:load                                      # " "db:test:load_schema                               # " "db:test:load_structure                            # " "db:test:prepare                                   # " "db:test:purge                                     # " "db:version                                        # Retrieves the current schema version number" "default                                           # " "doc                                               # " "doc/api                                           # " "doc/api/index.html                                # " "doc/app                                           # " "doc/app/index.html                                # " "doc:app                                           # Generate docs for the app -- also available doc:rails, doc:guides, doc:plugins (options: TEMPLATE=/rdoc-template.rb, TITLE=\"Custom Title\")" "doc:clobber                                       # " "doc:clobber_app                                   # " "doc:clobber_plugins                               # " "doc:clobber_rails                                 # " "doc:guides                                        # " "doc:plugins                                       # " "doc:rails                                         # " "doc:reapp                                         # " "doc:rerails                                       # " "environment                                       # " "features                                          # " "log:clear                                         # Truncates all *.log files in log/ to zero bytes" "middleware                                        # Prints out your Rack middleware stack" "newrelic:install                                  # Install a default config/newrelic.yml file" "newrelic:thanks                                   # Gratefulness is always appreciated" "noop                                              # " "notes                                             # Enumerate all annotations (use notes:optimize, :fixme, :todo for focus)" "notes:custom                                      # Enumerate a custom annotation, specify with ANNOTATION=CUSTOM" "notes:fixme                                       # " "notes:optimize                                    # " "notes:todo                                        # " "parallel:create[count]                            # create test databases via db:create --> parallel:create[num_cpus]" "parallel:drop[count]                              # drop test databases via db:drop --> parallel:drop[num_cpus]" "parallel:features[count,pattern,options]          # run features in parallel with parallel:features[num_cpus]" "parallel:features-spinach[count,pattern,options]  # run features-spinach in parallel with parallel:features-spinach[num_cpus]" "parallel:load_schema[count]                       # load dumped schema for test databases via db:schema:load --> parallel:load_schema[num_cpus]" "parallel:load_structure[count]                    # load structure for test databases via db:structure:load --> parallel:load_structure[num_cpus]" "parallel:migrate[count]                           # update test databases via db:migrate --> parallel:migrate[num_cpus]" "parallel:prepare[count]                           # update test databases by dumping and loading --> parallel:prepare[num_cpus]" "parallel:rake[command]                            # launch given rake command in parallel" "parallel:seed[count]                              # load the seed data from db/seeds.rb via db:seed --> parallel:seed[num_cpus]" "parallel:spec[count,pattern,options]              # run spec in parallel with parallel:spec[num_cpus]" "parallel:test[count,pattern,options]              # run test in parallel with parallel:test[num_cpus]" "prepare:setup_task                                # " "profile:clear                                     # Clears users' profile photo if the cloudinary link is dead" "rails:template                                    # Applies the template supplied by LOCATION=(/path/to/template) or URL" "rails:templates:copy                              # " "rails:update                                      # Update configs and some other initially generated files (or use just update:configs, update:scripts, or update:application_controller)" "rails:update:application_controller               # " "rails:update:configs                              # " "rails:update:scripts                              # " "rails_env                                         # " "railties:install:migrations                       # " "rollbar:test                                      # Verify your gem installation by sending a test exception to Rollbar" "routes                                            # Print out all defined routes in match order, with names" "secret                                            # Generate a cryptographically secure secret key (this is typically used to generate a secret for cookie sessions)" "spec                                              # Run all specs in spec directory (excluding plugin specs)" "spec:acceptance                                   # Run the code examples in spec/acceptance" "spec:integration                                  # Run the code examples in spec/integration" "spec:lib                                          # Run the code examples in spec/lib" "spec:models                                       # Run the code examples in spec/models" "spec:routing                                      # Run the code examples in spec/routing" "spec:statsetup                                    # " "stats                                             # Report code statistics (KLOCs, etc) from the application" "test                                              # Runs test:units, test:functionals, test:integration together (also available: test:benchmark, test:profile, test:plugins)" "test:benchmark                                    # " "test:functionals                                  # " "test:integration                                  # " "test:plugins                                      # " "test:prepare                                      # " "test:profile                                      # " "test:recent                                       # Run tests for {:recent=>\"test:prepare\"} / Test recent changes" "test:run                                          # " "test:single                                       # Run tests for {:single=>\"test:prepare\"}" "test:test:benchmark_mode                          # " "test:uncommitted                                  # Run tests for {:uncommitted=>\"test:prepare\"} / Test changes since last checkin (only Subversion and Git)" "test:units                                        # " "test_data:load_user_data                          # Load test user accounts and data" "time:zones:all                                    # Displays all time zones, also available: time:zones:us, time:zones:local -- filter with OFFSET parameter, e.g., OFFSET=-6" "time:zones:local                                  # " "time:zones:us                                     # " "tmp:cache:clear                                   # " "tmp:clear                                         # Clear session, cache, and socket files from tmp/ (narrow w/ tmp:sessions:clear, tmp:cache:clear, tmp:sockets:clear)" "tmp:create                                        # Creates tmp directories for sessions, cache, sockets, and pids" "tmp:pids:clear                                    # " "tmp:sessions:clear                                # " "tmp:sockets:clear                                 # ")))